// Generated by CoffeeScript 2.7.0
(function() {
  var activate, deactivate, escapeHtml, fjoin, fname, marker, odog, openCustomDocument, openEditor, processYeFile, promisify, readFileSync, recordfile, resolveCustomEditor, tmpdir, updateWebview, vscode, writeFile, writeFileAsync;

  vscode = require('vscode');

  ({readFileSync, writeFile} = require('fs'));

  ({tmpdir} = require('os'));

  ({promisify} = require('util'));

  writeFileAsync = promisify(writeFile);

  ({
    // import { basename as fname, join as fjoin } from 'path';
    basename: fname,
    join: fjoin
  } = require('path'));

  //#
  marker = '# -----昭-----';

  // 调试通道
  odog = null;

  activate = function(context) {
    var cep, disposable, otC;
    // 创建输出通道
    otC = vscode.window.createOutputChannel('贱狗');
    context.subscriptions.push(otC);
    odog = function(msg) {
      var time;
      time = new Date().toLocaleTimeString();
      otC.appendLine(`[${time}] ${msg}`);
      return console.log(`[贱狗${time}]: ${msg}`);
    };
    odog('KeyDog 插件已激活');
    disposable = vscode.commands.registerCommand('cofee.helloWorld', function() {
      return vscode.window.showInformationMessage('H道动!');
    });
    context.subscriptions.push(disposable);
    
    // 注册自定义编辑器
    cep = vscode.window.registerCustomEditorProvider('贱狗.编辑器', {openCustomDocument, resolveCustomEditor});
    return context.subscriptions.push(cep);
  };

  deactivate = function() {};

  module.exports = {activate, deactivate};

  // 平铺函数1：创建文档
  openCustomDocument = function(uri) {
    return {
      // 在 CoffeeScript 中，函数最后一行自动返回
      uri: uri, // 给resolve用的uri
      dispose: function() {} // 销毁的回调
    };
  };

  
  // 平铺函数3：处理编辑器
  resolveCustomEditor = function(document, webviewPanel) {
    var saveListener;
    // 初始显示
    updateWebview(webviewPanel, document.uri.fsPath);
    // 监听保存事件, 虽然每个文档都注册一遍, 但是, 他们是同一个事件.
    // todo 未来移出去, 用一个注册表管理
    saveListener = vscode.workspace.onDidSaveTextDocument(function(doc) {
      if (doc.uri.fsPath === document.uri.fsPath) {
        return setTimeout((function() {
          return updateWebview(webviewPanel, document.uri.fsPath);
        }), 100);
      }
    });
    webviewPanel.onDidDispose(function() {
      return saveListener.dispose();
    });
    // 直接打开我们的分栏
    odog('KeyDog 可以操作了');
    return processYeFile(document);
  };

  // 平铺函数2：更新 webview 内容
  updateWebview = function(webviewPanel, filePath) {
    var content;
    content = readFileSync(filePath, 'utf8');
    return webviewPanel.webview.html = `<h1> 贱狗只读展示, 请于分栏编辑文件: ${fname(filePath)}</h1> 
<p><small>Updated: ${new Date().toLocaleTimeString()}</small></p>
<pre>${escapeHtml(content)}</pre>`;
  };

  // HTML 转义函数
  escapeHtml = function(text) {
    return text.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('"', '&quot;').replaceAll("'", '&#39;');
  };

  processYeFile = async function(doc) {
    var content, error, fileId, fileName, left, leftPath, right, rightPath, tempDir;
    fileId = doc.uri.fsPath;
    fileName = fname(fileId);
    odog(`处理文件: ${fileName}`);
    try {
      
      // 解析内容

      // todo 检查是否已在处理中, 只可能是不同分栏打开同一个文件

      // if (activeFiles.has(fileId)) {
      //     odog(`文件已在编辑中: #{fileName}`);
      //     vscode.window.showWarningMessage(`文件已在编辑中: #{fileName}`);
      //     await closeEditor(doc.uri); # * 关闭重复打开的文件
      //     return;
      // }
      content = doc.getText();
      [right, ...left] = content.split(marker);
      left = left.join(marker);
      // 创建临时文件
      tempDir = tmpdir();
      leftPath = fjoin(tempDir, `${fileName}_left.md`);
      rightPath = fjoin(tempDir, `${fileName}_right.md`);
      
      // 并行异步写入两个文件
      await Promise.all([writeFileAsync(leftPath, left), writeFileAsync(rightPath, right)]);
      odog(`创建临时文件: ${fname(leftPath)}, ${fname(rightPath)}`);
      
      // 记录活动文件
      recordfile(fileId, leftPath, rightPath);
      
      // 分栏打开临时文件
      // ✅ 用数组字面量 + Promise.all
      await Promise.all([
        openEditor({
          filePath: leftPath,
          viewColumn: vscode.ViewColumn.One,
          preserveFocus: true
        }),
        openEditor({
          filePath: rightPath,
          viewColumn: vscode.ViewColumn.Two,
          preserveFocus: false
        })
      ]);
      return odog('已打开临时文件分栏');
    } catch (error1) {
      error = error1;
      odog(`处理文件失败: ${fileName} - ${error}`);
      return vscode.window.showErrorMessage(`处理文件失败: ${error}`);
    }
  };

  recordfile = function(f1, f2, f3) {
    // 记录活动文件
    // activeFiles.set fileId, { leftPath, rightPath }
    return odog(`记录活动文件: ${fileId}`);
  };

  openEditor = async function({filePath, viewColumn, preserveFocus}) {
    var doc, error, uri;
    try {
      uri = vscode.Uri.file(filePath);
      doc = (await vscode.workspace.openTextDocument(uri));
      await vscode.window.showTextDocument(doc, {viewColumn, preserveFocus});
      return odog(`打开编辑器: ${path.basename(filePath)}`);
    } catch (error1) {
      error = error1;
      return odog(`打开编辑器失败: ${path.basename(filePath)} - ${error}`);
    }
  };

}).call(this);
