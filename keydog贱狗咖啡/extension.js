// Generated by CoffeeScript 2.7.0
(function() {
  var activate, ddog, deactivate, docdic, endlabel, fjoin, fname, marker, odog, ofile, openEditor, tmpdir, vscode, webviewdic, writeFileAsync, yefamily;

  vscode = require('vscode');

  ({
    basename: fname,
    join: fjoin
  } = require('path'));

  // 需要添加
  ({tmpdir} = require('os'));

  ({
    writeFile: writeFileAsync
  } = require('fs').promises);

  marker = '# -----昭-----';

  endlabel = '新.ya';

  // ye文件映射表
  yefamily = {};

  // doc映射表
  docdic = {};

  // webview映射表
  webviewdic = {};

  // 调试通道
  odog = null;

  ddog = null;

  activate = function(context) {
    var disposable, hotExitSetting, otC, reasons;
    // 创建输出通道
    otC = vscode.window.createOutputChannel('贱狗');
    context.subscriptions.push(otC);
    odog = function(msg) {
      var time;
      time = new Date().toLocaleTimeString();
      otC.appendLine(`[${time}] ${msg}`);
      return console.log(`[贱狗${time}]: ${msg}`);
    };
    ddog = function(msg) {
      var time;
      time = new Date().toLocaleTimeString();
      otC.appendLine(`[${time}] [调试] ${JSON.stringify(msg)}`);
      return console.log(`[贱狗${time}][调试]: ${JSON.stringify(msg)}`);
    };
    odog('KeyDog 插件已激活');
    reasons = ['未知', '人工保存', '自动保存', '失焦保存'];
    context.subscriptions.push(vscode.workspace.onDidCloseTextDocument(function(doc) {
      return odog(`DidClose: ${vscode.workspace.asRelativePath(doc.fileName)}`);
    }), vscode.window.onDidChangeActiveTextEditor(function(editor) {
      var name;
      name = editor && (editor.document.uri.scheme === 'file' ? vscode.workspace.asRelativePath(editor.document.fileName) : `[${editor.document.uri.scheme}]`) || 'none';
      return odog(`DidChangeActive: ${name}`);
    }), vscode.window.onDidChangeVisibleTextEditors(function(es) {
      var e, names;
      names = ((function() {
        var i, len, results;
        if (e.document.uri.scheme === 'file') {
          return fname(e.document.fileName);
        } else {
          results = [];
          for (i = 0, len = es.length; i < len; i++) {
            e = es[i];
            results.push(`[${e.document.uri.scheme}]`);
          }
          return results;
        }
      })()).join(',');
      return odog(`DidChangeVisible: ${names}`);
    }), vscode.workspace.onWillSaveTextDocument(function(e) {
      return odog(`WillSave: ${reasons[e.reason] || e.reason}: ${vscode.workspace.asRelativePath(e.document.fileName)}`);
    }), vscode.workspace.onDidSaveTextDocument(function(doc) {
      return odog(`DidSave: ${vscode.workspace.asRelativePath(doc.fileName)}`);
    }), vscode.workspace.onDidOpenTextDocument(function(doc) {
      // * 在这里尝试打开文件时新建文件并打开
      return ofile(doc);
    // utitlefile doc
    }), vscode.window.onDidChangeTextEditorViewColumn(function(e) {
      return odog(`DidChangeViewColumn: ${fname(e.textEditor.document.fileName)} -> 第${e.textEditor.viewColumn}栏`);
    }), vscode.window.onDidChangeTextEditorOptions(function(e) {
      return odog(`DidChangeOptions: ${fname(e.textEditor.document.fileName)}`);
    }), vscode.window.onDidChangeWindowState(function(e) {
      return odog(`DidChangeWindowState: focused=${e.focused}`);
    // * 这个可能才是该搞的.  
    }), vscode.window.tabGroups.onDidChangeTabs(function(e) {
      var fp, i, len, ref, ref1, ref2, results, tab;
      odog(`onDidChangeTabs: focused=${e.closed.length}`);
      ref = e.closed;
      // fsPaths = (tab.input.uri.fsPath for tab in e.closed when tab.input?.uri?.fsPath)
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        tab = ref[i];
        fp = (ref1 = tab.input) != null ? (ref2 = ref1.uri) != null ? ref2.fsPath : void 0 : void 0;
        if (!(fp && fp.endsWith(endlabel))) {
          odog(`onDidChangeTabs不是文本:  - ${tab.label} (${tab.group.viewColumn})`);
          continue;
        }
        results.push(odog(`onDidChangeTabs: ${tab.label} 分栏:(${tab.group.viewColumn})\n  路径: ${fp}`));
      }
      return results;
    }));
    disposable = vscode.commands.registerCommand('cofee.helloWorld', function() {
      return vscode.window.showInformationMessage('H道动!');
    });
    context.subscriptions.push(disposable);
    // 验证热退出
    hotExitSetting = vscode.workspace.getConfiguration('files').get('hotExit');
    return odog(`当前热退出设置: ${hotExitSetting}`);
  };

  deactivate = function() {};

  module.exports = {activate, deactivate};

  openEditor = async function({filePath, viewColumn, preserveFocus}) {
    var doc, editor, uri;
    odog(`openEditor打开编辑器: ${fname(filePath)}, viewColumn: ${viewColumn}, preserveFocus: ${preserveFocus}`);
    uri = vscode.Uri.file(filePath);
    doc = (await vscode.workspace.openTextDocument(uri));
    editor = (await vscode.window.showTextDocument(doc, {viewColumn, preserveFocus}));
    // 全局docdic
    docdic[filePath] = doc;
    return odog(`openEditor文件状态: ${fname(filePath)}, isDirty: ${doc.isDirty}, isUntitled: ${doc.isUntitled}`);
  };

  
  // 会延迟3分钟的open方式;
  ofile = async function(doc) {
    var name, np;
    name = doc.uri.scheme === 'file' ? fname(doc.fileName) : `[${doc.uri.scheme}]`;
    odog(`ofile: ${name}`);
    if (doc.uri.scheme !== 'file') {
      odog(`ofile: 不是文件类型, 跳过处理: ${name}`);
      return;
    }
    // 判断文件扩展名
    if (name.endsWith('.wo') || name.endsWith('.ha')) {
      odog(`ofile: 发现贱狗文件: ${name}`);
      np = doc.uri.fsPath + endlabel;
      odog(`ofile写入文件路径: ${np}`);
      await writeFileAsync(np, 'wo的内容', 'utf8');
      // 打开编辑器
      return (await openEditor({
        filePath: np,
        viewColumn: vscode.ViewColumn.One,
        preserveFocus: true
      }));
    } else {
      return odog(`ofile: 不是贱狗文件, 跳过处理: ${name}`);
    }
  };

}).call(this);
